pub mod meta;
pub mod opcode;

pub use meta::AstMeta;
pub use opcode::Opcode;

/// The AST items that may be in an AST tree generated by Flycatcher's parser.
#[derive(Clone, Debug)]
pub enum Ast {
    /// An identifier literal, such as `my_identifier` or `__my4other2identifier`.
    IdentifierLiteral(String),

    /// Booleans may either be `true` or `false`.
    BooleanLiteral(bool),

    /// A string literal such as "Hello, world!".
    StringLiteral(String),

    /// Integer literals cannot be negative at the parsing phase, since the operator to make them
    /// negative isn't functional until the compilation phase.
    IntegerLiteral(u64),

    /// A floating point number literal, like `42.0` or `4.2e1`.
    FloatLiteral(f64),

    /// An array literal, using the `[]` syntax:
    /// 
    /// ```flycatcher
    /// [1, 2, 3]
    /// ```
    ArrayLiteral(Vec<AstMeta>),

    /// A unary expression, (or a prefix expression) such as `-20`.
    UnaryExpr(Opcode, Box<AstMeta>),

    /// A binary expression, such as `2 + 2`.
    BinaryExpr(Opcode, Box<AstMeta>, Box<AstMeta>),

    /// A Subscript expression, such as `my_iden[subscript]`.  The first object is the subject of the
    /// expression, the second object is the value inside of the `[]`, if any.
    SubscriptExpr(Box<AstMeta>, Option<Box<AstMeta>>),

    /// An `if` statement with any amount of branches.
    IfStmnt {
        /// The expression that the `if` statement evaluates.
        expr: Box<AstMeta>,

        /// The code block in the `if` statement.  It is wrapped in `{}`.
        block: Vec<AstMeta>,

        /// The list of branches in the `if` statement, such as:
        ///
        /// ```flycatcher
        /// if expr {
        /// } else if expr { // branch
        /// } else { // branch
        /// }
        /// ```
        branches: Vec<AstMeta>,
    },

    WhileStmnt {
        /// The expression to evaluate.
        expr: Box<AstMeta>,

        /// A list of child statements in the block after the expression.
        block: Vec<AstMeta>,
    },

    /// A block statement with a list of child statements.
    Block(Vec<AstMeta>),
}
